[ 
    {
        "trigger_url": "https://api.runscope.com/radar/cfb76aa9-930c-4fdd-865d-a58d807226da/trigger", 
        "name": "Main Test Suite Adv - Non Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": " {\"email\":\"{{email}}\",\"password\":\"{{password}}\"}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenVal"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Login & Authentication step", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var tokenSchema = {\n  title: 'dataSchema',\n  type: 'object',\n  required: ['id', 'userId', 'userAgent', 'ip', 'streamId'],\n  properties: {\n    id: {\n      type: 'string'\n    },\n    userId: {\n      type: 'number'\n    },\n    userAgent: {\n      type: 'string'\n    },\n    ip: {\n        type: 'string'\n    },\n    streamId: {\n        type: 'number'\n    }\n  }\n};\n\nchai.tv4.addSchema('tokenListSchema', tokenSchema);\nvar schema = chai.tv4.getSchema('tokenListSchema');\nvariables.set(\"tSchema\", schema);"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/auth", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.userId", 
                        "name": "userId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Verify Authentication", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events?limit={{maxLimit}}", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data[0].id", 
                        "name": "eventId"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "GET /events - limit testing.", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    counter += 1;\n}\nassert.equal(counter, variables.get(\"maxLimit\"), '== number of events called');"
                ], 
                "before_scripts": [], 
                "data": "", 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events?limit={{minLimit}}&fields=id,name", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - fields param test", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data[0].id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.isString(json.data[counter].name, 'name');\n    \n    counter += 1;\n}\nassert.equal(counter, variables.get(\"minLimit\"), '== number of events called');"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events?offset={{listOffset}}&limit=10", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data[1].id", 
                        "name": "newId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Offset & Limit test", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data[0].id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events/{{eventId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Change eventId", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "variables.set(\"eventId\", 11708);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{eventId}}?fields=id,name", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Receive detailed info about a singular event", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.id", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{eventId}}/streams?isActive", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events/eventId/streams - returns a list of streams associated with that eventId", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.equal(json.data[counter].eventId, variables.get(\"eventId\"), 'eventId');\n    counter += 1;\n}\nvariables.set(\"streamId\", json.data[0].id);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/streams/{{streamId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /streams/streamId - Returns detailed info about a stream", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.id", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal_number", 
                        "property": "data.id", 
                        "value": "{{streamId}}", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.eventId", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.eventId", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events/{{random_int}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /events - Negative testing randomized numerical eventIds", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events/{{random_string(10)}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /events - Negative testing randomized alphanumeric eventIds", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "400", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/tokens?userId={{userId}}", 
                "variables": [
                    {
                        "source": "response_status", 
                        "name": "tokenCode"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Should return list of tokens available to the user.", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nif(json.data.length)\n{\nwhile (counter < json.data.length) \n{\n    if(assert.jsonSchema(json.data[counter], variables.get(\"tSchema\")))\n        assert.isString(json.data[counter].id, 'id');\n    \n    counter += 1;\n}\n\nvar nTokens = counter;\nassert.equal(nTokens, json.data.length, '== number of tokens possesed.');\nvariables.set(\"numTokens\", nTokens);\nif(counter > 0)\n    variables.set(\"tokenId\", json.data[counter - 1].id);\nelse\n{\n    if(assert.isNotEmpty(json.data) && json.data !== '[]')\n        variables.set(\"tokenId\", json.data[counter].id);\n}\n}"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [
                    {
                        "source": "response_status", 
                        "name": "madeToken"
                    }, 
                    {
                        "source": "response_json", 
                        "property": "data.token.ip", 
                        "name": "tokenIP"
                    }, 
                    {
                        "source": "response_json", 
                        "property": "data.token.id", 
                        "name": "tokenId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Grab a new token without sending IP", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.playlist", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.stream", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvariables.set(\"tokenId\", json.data.id);\nassert.jsonSchema(json.data.token, variables.get(\"tSchema\"));"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "{\r\n\"ip\": \"111.22.22.22\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Grab another token from the same stream using signed request and sending different IP.", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.token.ip", 
                        "value": "111.22.22.22", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.token.ip", 
                        "value": "{{tokenIP}}", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.token.id", 
                        "value": "{{tokenId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nassert.jsonSchema(json.data.token, variables.get(\"tSchema\"));"
                ], 
                "before_scripts": [
                    "var requestMethod = request.method.toLowerCase();\nvar requestHost = 'staging-live-api-3.flosports.tv';\nvar requestPath = '/streams/'+ variables.get(\"streamId\") +'/tokens';\nvar queryString = '';\nvar requestBody = request.body;\nvar message = requestMethod + \"\\n\" + requestHost + \"\\n\" + requestPath + \"\\n\" + queryString + \"\\n\" + requestBody;\nvar hmac = CryptoJS.HmacSHA256(message, variables.get('apiSecret'));\nvar signature = hmac.toString(CryptoJS.enc.Hex);\nconsole.log(message);\nconsole.log('signature ', signature);\nrequest.headers[\"Digest\"] = 'SHA-256=' + signature;"
                ], 
                "method": "POST"
            }, 
            {
                "comparison": "is_greater_than_or_equal", 
                "skipped": false, 
                "left_value": "{{numTokens}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/tokens?userId={{userId}}", 
                        "variables": [
                            {
                                "source": "response_status", 
                                "name": "sCode"
                            }
                        ], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "1f4e794c-ee15-4bf3-86e0-060bf2acc007", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "DELETE"
                    }
                ], 
                "right_value": "{{tokenLimit}}"
            }, 
            {
                "comparison": "equal", 
                "skipped": false, 
                "left_value": "{{sCode}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/tokens/{{tokenId}}", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "52075adb-3979-47ae-a1a5-04c87277acaa", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "DELETE"
                    }
                ], 
                "right_value": "404"
            }
        ], 
        "description": "Non Admin User\r\n"
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/6789a62a-e8f3-41d3-9ef8-c35cee4b9423/trigger", 
        "name": "Create/Delete An Event & Stream - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": "{\r\n\"email\":\"{{email}}\",\r\n\"password\":\"{{password}}\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "fragment": "", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenVal"
                    }, 
                    {
                        "source": "response_json", 
                        "property": "user_id", 
                        "name": "userId"
                    }, 
                    {
                        "source": "response_json", 
                        "property": "user.username", 
                        "name": "username"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "Login and grab your Auth Token", 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "user", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "user_id", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var tokenSchema = {\n  title: 'dataSchema',\n  type: 'object',\n  required: ['id', 'userId', 'userAgent', 'ip', 'streamId'],\n  properties: {\n    id: {\n      type: 'string'\n    },\n    userId: {\n      type: 'number'\n    },\n    userAgent: {\n      type: 'string'\n    },\n    ip: {\n        type: 'string'\n    },\n    streamId: {\n        type: 'number'\n    }\n  }\n};\n\nchai.tv4.addSchema('tokenListSchema', tokenSchema);\nvar schema = chai.tv4.getSchema('tokenListSchema');\nvariables.set(\"tSchema\", schema);"
                ], 
                "before_scripts": [], 
                "data": "", 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/auth", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.userId", 
                        "name": "userId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Grab userId and set some variables", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var d = new Date();\nvar year = d.getFullYear();\nvar month = d.getMonth() + 1;\nvar day = d.getDate();\nvar dd = year + \"-\" + month + \"-\" + day;\nvar d2 = day + 1;\nvar dd1 = year + \"-\" + month + \"-\" + d2;\n\nvariables.set(\"date\", dd);\nvariables.set(\"tomm\", dd1);\n\nvar hour = d.getHours();\nvar minutes = d.getMinutes();\nvar seconds = d.getSeconds();\nvar cTime = hour + \":\" + minutes + \":\" + seconds;\n\nvariables.set(\"time\", cTime);\n\nvar currDate = dd + \" \" + cTime;\n\nvariables.set(\"date-time\", currDate);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/status", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "List the status of various services that are used by the API", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.redis", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.firebase", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.mysql", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.provision-stream-targets", 
                        "value": "success", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\"data\":{\r\n  \"name\": \"Runscope Automation Event\",\r\n  \"shortName\": \"Runscope Event\",\r\n  \"slug\": \"runscope-automation-event\",\r\n  \"verticalId\": 9001,\r\n  \"description\": \"An Awesome Championship\",\r\n  \"background\": \"It's a test\",\r\n  \"schedule\": \"\",\r\n  \"startDate\": \"{{date}}\",\r\n  \"endDate\": \"{{date}}\",\r\n  \"startTime\": \"{{time}}\",\r\n  \"timezone\": \"America/New_York\",\r\n  \"geoWhiteList\": null,\r\n  \"geoBlackList\": null,\r\n  \"enableOtt\": true,\r\n  \"enableTatoo\": true,\r\n  \"status\": \"LIVE\",\r\n  \"eventStatusMessage\": \"Event will continue tomorrow\",\r\n  \"premiumStatus\": \"PAID\"\r\n}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/events", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "eventId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Create an Event", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.startAtNext", 
                        "value": "Invalid date", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "{\r\n\t\"data\":\r\n\t{\r\n\t\t\"code\": \"WR_9876655\",\r\n\t\t\"name\": \"Runscope API Test\",\r\n\t\t\"eventId\": {{eventId}},\r\n\t\t\"isActive\": true,\r\n\t\t\"encodingProfileId\": 2,\r\n\t\t\"originId\": 1,\r\n\t\t\"embedCode\": \"\",\r\n\t\t\"xmlFileName\": \"\",\r\n\t\t\"sortOrder\": 0,\r\n\t\t\"isDefault1\": true,\r\n\t\t\"isDefault2\": false\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/events/{{eventId}}/streams", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "streamId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Create a new Stream for the new Event", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/cdns", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Get the CDNS and extract the Akamai id", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.isString(json.data[counter].name, 'name');\n    \n    if(json.data[counter].name === 'Akamai MSL4')\n    {   \n        variables.set('cdnId', json.data[counter].id);\n        break;\n    }\n    else\n        counter += 1;\n}\nassert.equal(json.data[counter].id, variables.get('cdnId'));"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Get Stream Targets for this Stream", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": true, 
                "form": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Delete Stream Targets for this Stream", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "body": "", 
                "skipped": true, 
                "form": {}, 
                "url": "{{staging-url}}/cdns/provision-stream-targets", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Provision Stream Targets", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/cdns/update-stream-targets-statuses", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Update Stream-Targets", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "PATCH"
            }, 
            {
                "body": "", 
                "skipped": true, 
                "form": {}, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/stream-targets/{{cdnId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Assign a stream-target to the streamId", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "PUT"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Get Stream Targets for this Stream", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.token.id", 
                        "name": "tokenId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Generate Token for new stream w/o sending IP Address", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nassert.jsonSchema(json.data.token, variables.get(\"tSchema\"));"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "{\r\n\"ip\":\"111.22.22.22\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Generate Token for new stream with IP Address and Sign Request", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.token.ip", 
                        "value": "111.22.22.22", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nassert.jsonSchema(json.data.token, variables.get(\"tSchema\"));"
                ], 
                "before_scripts": [
                    "var requestMethod = request.method.toLowerCase();\nvar requestHost = 'staging-live-api-3.flosports.tv';\nvar requestPath = '/streams/'+ variables.get(\"streamId\") +'/tokens';\nvar queryString = '';\nvar requestBody = request.body;\nvar message = requestMethod + \"\\n\" + requestHost + \"\\n\" + requestPath + \"\\n\" + queryString + \"\\n\" + requestBody;\nvar hmac = CryptoJS.HmacSHA256(message, variables.get('apiSecret'));\nvar signature = hmac.toString(CryptoJS.enc.Hex);\nconsole.log(message);\nconsole.log('signature ', signature);\nrequest.headers[\"Digest\"] = 'SHA-256=' + signature;"
                ], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/tokens?userId={{userId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{  \r\n   \"type\":\"ready\",\r\n   \"context\":{  \r\n      \"message\":\"\",\r\n      \"value\":{},\r\n      \"playerId\":\"runscope-player-id\",\r\n      \"playerInstance\":\"runscope-video-player-1\",\r\n      \"file\":\"runscope file\",\r\n      \"referer\":\"https://runscope.com\",\r\n      \"seqNumber\":1\r\n   },\r\n   \"user\":{  \r\n      \"id\": {{userId}},\r\n      \"resolution\":\"1499x485\"\r\n   }\r\n}", 
                "skipped": true, 
                "form": {}, 
                "url": "{{staging-url}}/tokens/{{tokenId}}/logs", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/tokens/{{tokenId}}?userId={{userId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{tokenId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/tokens/{{tokenId}}/heartbeat", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "{\r\n  \"type\": \"error\",\r\n  \"context\": {\r\n    \"message\": \"The live stream is either down or has ended.\"\r\n  },\r\n  \"user\": {\r\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36\",\r\n    \"resolution\": \"1440x900\"\r\n  }\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/tokens/{{tokenId}}/failures", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "202", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/tokens/{{tokenId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "body": "{\r\n  \"status\": \"Concluded\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/events/{{eventId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Change the Event from Live to Concluded.", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "PATCH"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/events/{{eventId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events/{{eventId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }
        ], 
        "description": "This test suite will simulate creating an event using the Live 3.0 API endpoints. It will also create a stream for the event and provision it with a stream target so that a user can generate a token and gain access to the stream."
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/3fbd4fc7-0edd-44ee-8d2d-282e6e6309f6/trigger", 
        "name": "Main Test Suite Basic - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": " {\r\n    \"email\":\"{{email}}\",\r\n    \"password\":\"{{password}}\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenVal"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Login & Authentication step", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var tokenSchema = {\n  title: 'dataSchema',\n  type: 'object',\n  required: ['id', 'userId', 'userAgent', 'ip', 'streamId'],\n  properties: {\n    id: {\n      type: 'string'\n    },\n    userId: {\n      type: 'number'\n    },\n    userAgent: {\n      type: 'string'\n    },\n    ip: {\n        type: 'string'\n    },\n    streamId: {\n        type: 'number'\n    }\n  }\n};\n\nchai.tv4.addSchema('dataSchema', tokenSchema);\nvar schema = chai.tv4.getSchema('dataSchema');\nvariables.set(\"tSchema\", schema);"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "url": "{{staging-url}}/auth", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.userId", 
                        "name": "userId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify Authentication", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/info", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Info Endpoint of Current build", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events?limit={{maxLimit}}&sort=-id", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data[0].id", 
                        "name": "eventId"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "GET /events - limit testing.", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    counter += 1;\n}\nassert.equal(counter, variables.get(\"maxLimit\"), '== number of events called');"
                ], 
                "before_scripts": [], 
                "data": "", 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events?limit={{minLimit}}&fields=id,name&sort=-id", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /events - fields param test", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data[0].id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.isString(json.data[counter].name, 'name');\n    \n    counter += 1;\n}\nassert.equal(counter, variables.get(\"minLimit\"), '== number of events called');"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events?offset={{listOffset}}&limit=6", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Offset & Limit test", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data[0].id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{eventId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Change eventId", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "variables.set(\"eventId\", 11708);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{eventId}}?fields=id,name", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Receive detailed info about a singular event", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.id", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{eventId}}/streams?isActive", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events/eventId/streams - returns a list of streams associated with that eventId", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.equal(json.data[counter].eventId, variables.get(\"eventId\"), 'eventId');\n    counter += 1;\n}\nvariables.set(\"streamId\", json.data[0].id);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /streams/streamId - Returns detailed info about a stream", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.id", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal_number", 
                        "property": "data.id", 
                        "value": "{{streamId}}", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.eventId", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.eventId", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{random_int}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Negative testing randomized numerical eventIds", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{random_string(10)}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Negative testing randomized alphanumeric eventIds", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "400", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/tokens?userId={{userId}}", 
                "variables": [
                    {
                        "source": "response_status", 
                        "name": "tokenCode"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Should return list of tokens available to the user.", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isString(json.data[counter].id, 'id');\n    counter += 1;\n}\nvariables.set(\"numTokens\", counter);\nassert.equal(counter, json.data.length, '== number of tokens possesed.');"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "POST /streams/streamId/tokens - Should create a new token for the stream", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nassert.jsonSchema(json.data.token, variables.get(\"tSchema\"));"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                "variables": [
                    {
                        "source": "response_status", 
                        "name": "stResponse"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Returns Stream targets of Stream", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "comparison": "not_equal", 
                "skipped": false, 
                "left_value": "{{stResponse}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/streams/provision-stream-targets", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "9f6b4663-a520-4ffc-87dd-45737edaa777", 
                        "note": "", 
                        "headers": {
                            "User-Agent": [
                                "{{uAgent}}"
                            ], 
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": 200, 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "POST"
                    }, 
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/streams/{{streamId}}/stream-targets/2", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "0fb56958-4ad7-4331-a47b-cc2d354cbe26", 
                        "note": "Assign cdnId so token can be generated", 
                        "headers": {
                            "User-Agent": [
                                "{{uAgent}}"
                            ], 
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "201", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "PUT"
                    }, 
                    {
                        "skipped": false, 
                        "headers": {
                            "User-Agent": [
                                "{{uAgent}}"
                            ], 
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "82cd0835-0d7a-4e58-9a3d-f84c778e7cee", 
                        "note": "Verify that the stream-target has been assigned a CDN", 
                        "fragment": "", 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "GET"
                    }
                ], 
                "right_value": "200"
            }, 
            {
                "body": "{\r\n\"ip\":\"111.22.22.22\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Signed IP Specific Token Request", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.token.ip", 
                        "value": "111.22.22.22", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nassert.jsonSchema(json.data.token, variables.get(\"tSchema\"));"
                ], 
                "before_scripts": [
                    "var requestMethod = request.method.toLowerCase();\nvar requestHost = 'staging-live-api-3.flosports.tv';\nvar requestPath = '/streams/'+ variables.get(\"streamId\") +'/tokens';\nvar queryString = '';\nvar requestBody = request.body;\nvar message = requestMethod + \"\\n\" + requestHost + \"\\n\" + requestPath + \"\\n\" + queryString + \"\\n\" + requestBody;\nvar hmac = CryptoJS.HmacSHA256(message, variables.get('apiSecret'));\nvar signature = hmac.toString(CryptoJS.enc.Hex);\nconsole.log(message);\nconsole.log('signature ', signature);\nrequest.headers[\"Digest\"] = 'SHA-256=' + signature;"
                ], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/tokens?userId={{userId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Should return list of tokens available to the user.", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isString(json.data[counter].id, 'id');\n    counter += 1;\n}\nvariables.set(\"numTokens\", json.data.length);\nassert.equal(counter, json.data.length, '== number of tokens possesed.');\n\nif(counter > 0)\n    counter -= 1;\n\nif(json.data.length !== 0)\n    variables.set(\"tokenId\", json.data[counter].id);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "comparison": "is_greater_than_or_equal", 
                "skipped": false, 
                "left_value": "{{numTokens}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/tokens?userId={{userId}}", 
                        "variables": [
                            {
                                "source": "response_status", 
                                "name": "sCode"
                            }
                        ], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "69c5e4b3-f815-435d-a5d0-ba587632ea65", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "DELETE"
                    }
                ], 
                "right_value": "{{tokenLimit}}"
            }, 
            {
                "comparison": "not_equal", 
                "skipped": false, 
                "left_value": "{{sCode}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/tokens/{{tokenId}}", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "6dcab668-59d1-479e-a279-cbcb304961c3", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "DELETE"
                    }, 
                    {
                        "skipped": false, 
                        "url": "{{staging-url}}/tokens/{{tokenId}}", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "3444203b-1d79-4f0e-b0b8-000acee6196b", 
                        "note": "Verifying single token deletion", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "404", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "GET"
                    }
                ], 
                "right_value": "204"
            }
        ], 
        "description": "Does not do JSON schema checks."
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/5c42b44c-c162-40c3-88f0-405f0f52af8b/trigger", 
        "name": "Transcoding-Renditions - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": "{\r\n   \"email\":\"{{email}}\",\r\n   \"password\":\"{{password}}\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "fragment": "", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenAuth"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "", 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "data": "", 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-renditions?limit=10", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"width\": 720,\r\n\t\t\"height\": 1280,\r\n\t\t\"fps\": 30,\r\n\t\t\"averageBitRate\": 2000,\r\n\t\t\"profile\": \"Low\",\r\n                \"channels\": \"2\",\r\n                \"audioSampleRate\": 3,\r\n                \"audioBitRate\": 5,\r\n\t\t\"name\":\"Runscope-Transcoding-Renditions-CreationTest\",\r\n                \"codecLevel\":\"\"\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-renditions", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "transcodingRenditionId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-renditions/{{transcodingRenditionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{transcodingRenditionId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"fps\": 60\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-renditions/{{transcodingRenditionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "PATCH"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-renditions/{{transcodingRenditionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{transcodingRenditionId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-renditions/{{transcodingRenditionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-renditions/{{transcodingRenditionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }
        ], 
        "description": "Get a list of renditions, verify it. Create a test rendition, patch it, get it by id, then delete it and verify it's deletion."
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/90f118e1-a8a4-42cd-b2e2-a1018a09483e/trigger", 
        "name": "Transcoding-Profile-Renditions - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": "{\r\n   \"email\":\"{{email}}\",\r\n   \"password\":\"{{password}}\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "fragment": "", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenAuth"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "", 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "data": "", 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profile-renditions?limit=10", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"id\": 505,\r\n\t\t\"name\":\"Runscope-TranscoderProfile-CreationTest\",\r\n\t\t\"fps\": 30,\r\n\t\t\"keyframes\": 2,\r\n                \"xcodeTopRendition\": false,\r\n                \"codecLevel\":\"3.1\"\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-profiles", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "transcodingProfileId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Make a Temp Profile Id", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"width\": 720,\r\n\t\t\"height\": 1280,\r\n\t\t\"fps\": 30,\r\n\t\t\"averageBitRate\": 2000,\r\n\t\t\"profile\": \"Low\",\r\n                \"channels\": \"2\",\r\n                \"audioSampleRate\": 3,\r\n                \"audioBitRate\": 5,\r\n                \"codecLevel\":\"\",\r\n                 \"name\":\"Runscope-Transco ding-Renditions-CreationTest\"\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-renditions", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "transcodingRenditionId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Create a temp rendition Id", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"transcodingProfileId\": {{transcodingProfileId}},\r\n\t\t\"transcodingRenditionId\": {{transcodingRenditionId}}\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-profile-renditions", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "tprId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Use the two temps to create test TPR Id", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profile-renditions/{{tprId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{tprId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profile-renditions/{{tprId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{tprId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-profile-renditions/{{tprId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Delete Temp TPR Id", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profile-renditions/{{tprId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify Deletion", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-profiles/{{transcodingProfileId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Delete Temp Profile Id", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profiles/{{transcodingProfileId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify Deletion", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-renditions/{{transcodingRenditionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Delete Temp Rendition Id", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-renditions/{{transcodingRenditionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify Deletion", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }
        ], 
        "description": "Get a list of TPRs, verify it. Create a test TPR, patch it, get it by id, then delete it and verify it's deletion."
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/39c83f39-1b42-4fe7-84f8-1ab76fe7614e/trigger", 
        "name": "Wowza-Licenses - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": "{\r\n\"email\": \"{{email}}\",\r\n\"password\": \"{{password}}\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "fragment": "", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "authToken"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "", 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "data": "", 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "url": "{{staging-url}}/wowza-licenses", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t \"id\": 101,\r\n\t\t \"name\": \"runscopeTest\",\r\n\t\t \"key\": \"\",\r\n\t\t \"description\": \"qaAutomationTest\",\r\n\t\t \"isDefault\": true\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "url": "{{staging-url}}/wowza-licenses", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "wowzaLicenseId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/wowza-licenses/{{wowzaLicenseId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"description\":\"qaAutomation-PATCH-Test\"\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/wowza-licenses/{{wowzaLicenseId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "PATCH"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/wowza-licenses/{{wowzaLicenseId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/wowza-licenses/{{wowzaLicenseId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/wowza-licenses/{{wowzaLicenseId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }
        ], 
        "description": "wowza-licenses endpoint testing with Admin account."
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/27506981-79d3-432d-b456-9c741b5c116d/trigger", 
        "name": "Main Test Suite Basic - Non Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": " {\"email\":\"{{email}}\",\"password\":\"{{password}}\"}", 
                "skipped": false, 
                "form": {}, 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenVal"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Login & Authentication step", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var tokenSchema = {\n  title: 'dataSchema',\n  type: 'object',\n  required: ['id', 'userId', 'userAgent', 'ip', 'streamId', 'issued', 'revoked', 'reason'],\n  properties: {\n    id: {\n      type: 'string'\n    },\n    userId: {\n      type: 'number'\n    },\n    userAgent: {\n      type: 'string'\n    },\n    ip: {\n        type: 'string'\n    },\n    streamId: {\n        type: 'number'\n    },\n    issued: {\n        type: 'number'\n    },\n    revoked: {\n        type: 'number'\n    },\n    reason: {\n        type: 'string'\n    }\n  }\n};\n\nchai.tv4.addSchema('dataSchema', tokenSchema);\nvar schema = chai.tv4.getSchema('dataSchema');\nvariables.set(\"tSchema\", schema);"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "url": "{{staging-url}}/auth", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.userId", 
                        "name": "userId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify Authentication", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/info", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Info Endpoint of Current build", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events?limit={{maxLimit}}", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data[0].id", 
                        "name": "eventId"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - limit testing.", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    counter += 1;\n}\nassert.equal(counter, variables.get(\"maxLimit\"), '== number of events called');"
                ], 
                "multipart_form": [], 
                "before_scripts": [], 
                "data": "", 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events?limit={{minLimit}}&fields=id,name", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - fields param test", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data[0].id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.isString(json.data[counter].name, 'name');\n    \n    counter += 1;\n}\nassert.equal(counter, variables.get(\"minLimit\"), '== number of events called');"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events?offset={{listOffset}}&limit=6", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Offset & Limit test", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data[0].id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{eventId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Change eventId", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "variables.set(\"eventId\", 11708);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{eventId}}?fields=id,name", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Receive detailed info about a singular event", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.id", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{eventId}}/streams?isActive", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events/eventId/streams - returns a list of streams associated with that eventId", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.equal(json.data[counter].eventId, variables.get(\"eventId\"), 'eventId');\n    counter += 1;\n}\nvariables.set(\"streamId\", json.data[0].id);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /streams/streamId - Returns detailed info about a stream", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.id", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal_number", 
                        "property": "data.id", 
                        "value": "{{streamId}}", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.eventId", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.eventId", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{random_int}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Negative testing randomized numerical eventIds", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{random_string(10)}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Negative testing randomized alphanumeric eventIds", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "400", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/tokens?userId={{userId}}", 
                "variables": [
                    {
                        "source": "response_status", 
                        "name": "tokenCode"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Should return list of tokens available to the user.", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isString(json.data[counter].id, 'id');\n    counter += 1;\n}\nvariables.set(\"numTokens\", counter);\nassert.equal(counter, json.data.length, '== number of tokens possesed.');"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "POST /streams/streamId/tokens - Should create a new token for the stream", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                "variables": [
                    {
                        "source": "response_status", 
                        "name": "stResponse"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Returns Stream targets of Stream", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "comparison": "not_equal", 
                "skipped": false, 
                "left_value": "{{stResponse}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/streams/provision-stream-targets", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "ff2887b7-2f64-4196-ac73-db64bddef59b", 
                        "note": "", 
                        "headers": {
                            "User-Agent": [
                                "{{uAgent}}"
                            ], 
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": 200, 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "POST"
                    }, 
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/streams/{{streamId}}/stream-targets/2", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "cda39552-0062-4a69-9869-1451a5b0b481", 
                        "note": "Assign cdnId so token can be generated", 
                        "headers": {
                            "User-Agent": [
                                "{{uAgent}}"
                            ], 
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "201", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "PUT"
                    }, 
                    {
                        "skipped": false, 
                        "headers": {
                            "User-Agent": [
                                "{{uAgent}}"
                            ], 
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "552bb525-cbcf-4144-a22c-82becf806f03", 
                        "note": "Verify that the stream-target has been assigned a CDN", 
                        "fragment": "", 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "GET"
                    }
                ], 
                "right_value": "200"
            }, 
            {
                "body": "{\r\n\"ip\":\"111.22.22.22\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Signed IP Specific Token Request", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.token.ip", 
                        "value": "111.22.22.22", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [
                    "var requestMethod = request.method.toLowerCase();\nvar requestHost = 'staging-live-api-3.flosports.tv';\nvar requestPath = '/streams/'+ variables.get(\"streamId\") +'/tokens';\nvar queryString = '';\nvar requestBody = request.body;\nvar message = requestMethod + \"\\n\" + requestHost + \"\\n\" + requestPath + \"\\n\" + queryString + \"\\n\" + requestBody;\nvar hmac = CryptoJS.HmacSHA256(message, variables.get('apiSecret'));\nvar signature = hmac.toString(CryptoJS.enc.Hex);\nconsole.log(message);\nconsole.log('signature ', signature);\nrequest.headers[\"Digest\"] = 'SHA-256=' + signature;"
                ], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/tokens?userId={{userId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Should return list of tokens available to the user.", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isString(json.data[counter].id, 'id');\n    counter += 1;\n}\nvariables.set(\"numTokens\", json.data.length);\nassert.equal(counter, json.data.length, '== number of tokens possesed.');\n\nif(counter > 0)\n    counter -= 1;\n\nif(json.data.length !== 0)\n    variables.set(\"tokenId\", json.data[counter].id);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "comparison": "is_greater_than_or_equal", 
                "skipped": false, 
                "left_value": "{{numTokens}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/tokens?userId={{userId}}", 
                        "variables": [
                            {
                                "source": "response_status", 
                                "name": "sCode"
                            }
                        ], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "683d4d0c-1b3f-4cfa-927e-77a0a395e82a", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "DELETE"
                    }
                ], 
                "right_value": "{{tokenLimit}}"
            }, 
            {
                "comparison": "not_equal", 
                "skipped": false, 
                "left_value": "{{sCode}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/tokens/{{tokenId}}", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "df1a6b70-7396-4cdf-8f33-d84f29a52372", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "DELETE"
                    }, 
                    {
                        "skipped": false, 
                        "url": "{{staging-url}}/tokens/{{tokenId}}", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "fa23f51f-3c5d-4976-856e-c3b0c269d1d1", 
                        "note": "Verifying single token deletion", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "404", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "GET"
                    }
                ], 
                "right_value": "204"
            }
        ], 
        "description": "Does not do JSON schema checks."
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/331bf6d5-03f3-4c3f-9aab-0de2b420b939/trigger", 
        "name": "Verticals Endpoint Testing - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": "{\r\n    \"email\":\"{{email}}\",\r\n    \"password\":\"{{password}}\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "fragment": "", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "authToken"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "Login for Auth Token Credentials", 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "data": "", 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/verticals?fields=id,name,code", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Access the verticals list", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"name\":\"RunscopeAutomationVeticalTest\",\r\n\t\t\"code\":\"runscopeautomationverticaltest\"\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/verticals", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "newVertId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Create your own test Vertical", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "is_greater_than", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "is_less_than", 
                        "value": "203", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/verticals?fields=id,name,code&sort=-id&limit=5", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Grab the first Vertical Id in the list & Verify it is your new Vertical", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data[0].id", 
                        "value": "{{newVertId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/verticals/{{newVertId}}?fields=id,name,code", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Search Vertical list by Id", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{newVertId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"name\":\"RunscopeAutomationVeticalTest-PATCH\",\r\n\t\t\"code\":\"runscopeautomationverticaltest-patch\"\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/verticals/{{newVertId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Patch the name and code of your test Vertical", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{newVertId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "PATCH"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/verticals/{{newVertId}}?fields=id,name,code", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify changes", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{newVertId}}", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.name", 
                        "value": "RunscopeAutomationVeticalTest-PATCH", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.code", 
                        "value": "runscopeautomationverticaltest-patch", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/verticals/{{newVertId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Delete new Vert", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/verticals/{{newVertId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify Deletion", 
                "headers": {
                    "Authorization": [
                        "Bearer {{authToken}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }
        ], 
        "description": "Create, get, manipulate and delete verticals using these endpoints."
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/b15de761-0719-4128-a895-dd394063ceb4/trigger", 
        "name": "Transcoding-Profiles - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": "{\r\n   \"email\":\"{{email}}\",\r\n   \"password\":\"{{password}}\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "fragment": "", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenAuth"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "", 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "data": "", 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profiles?limit=10", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"id\": 101,\r\n\t\t\"name\":\"Runscope-TranscoderProfile-CreationTest\",\r\n\t\t\"fps\": 30,\r\n\t\t\"keyframes\": 2,\r\n               \"xcodeTopRendition\": false\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-profiles", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "transcodingProfileId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profiles/{{transcodingProfileId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{transcodingProfileId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"fps\": 60,\r\n\t\t\"keyframes\": 4,\r\n                \"cloudGraphics\": true\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-profiles/{{transcodingProfileId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "PATCH"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profiles/{{transcodingProfileId}}?=", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{transcodingProfileId}}", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.keyframes", 
                        "value": "4", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.cloudGraphics", 
                        "value": "true", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/transcoding-profiles/{{transcodingProfileId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/transcoding-profiles/{{transcodingProfileId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenAuth}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }
        ], 
        "description": "Get a list of profiles, verify it. Create a test profile, patch it, get it by id, then delete it and verify it's deletion."
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/e6d354bb-6111-488c-8d42-0ab220cd2508/trigger", 
        "name": "Main Test Suite Adv - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": " {\"email\":\"{{email}}\",\"password\":\"{{password}}\"}", 
                "skipped": false, 
                "form": {}, 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenVal"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Login & Authentication step", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var tokenSchema = {\n  title: 'dataSchema',\n  type: 'object',\n  required: ['id', 'userId', 'userAgent', 'ip', 'streamId'],\n  properties: {\n    id: {\n      type: 'string'\n    },\n    userId: {\n      type: 'number'\n    },\n    userAgent: {\n      type: 'string'\n    },\n    ip: {\n        type: 'string'\n    },\n    streamId: {\n        type: 'number'\n    }\n  }\n};\n\nchai.tv4.addSchema('tokenListSchema', tokenSchema);\nvar schema = chai.tv4.getSchema('tokenListSchema');\nvariables.set(\"tSchema\", schema);"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/auth", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.userId", 
                        "name": "userId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Verify Authentication", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ], 
                    "Cache-Control": [
                        "max-age=0;"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events?limit={{maxLimit}}", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data[0].id", 
                        "name": "eventId"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - limit testing.", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    counter += 1;\n}\nassert.equal(counter, variables.get(\"maxLimit\"), '== number of events called');"
                ], 
                "multipart_form": [], 
                "before_scripts": [], 
                "data": "", 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events?limit={{minLimit}}&fields=id,name", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /events - fields param test", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data[0].id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.isString(json.data[counter].name, 'name');\n    \n    counter += 1;\n}\nassert.equal(counter, variables.get(\"minLimit\"), '== number of events called');"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events?offset={{listOffset}}&limit=6", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Offset & Limit test", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data[0].id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events/{{eventId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Change eventId", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "variables.set(\"eventId\", 11708);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events/{{eventId}}?fields=id,name", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /events - Receive detailed info about a singular event", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.id", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.id", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/events/{{eventId}}/streams?isActive", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /events/eventId/streams - returns a list of streams associated with that eventId", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "data", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    assert.isNumber(json.data[counter].id, 'id');\n    assert.equal(json.data[counter].eventId, variables.get(\"eventId\"), 'eventId');\n    counter += 1;\n}\nvariables.set(\"streamId\", json.data[0].id);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "GET /streams/streamId - Returns detailed info about a stream", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.id", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal_number", 
                        "property": "data.id", 
                        "value": "{{streamId}}", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "is_a_number", 
                        "property": "data.eventId", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.eventId", 
                        "value": "{{eventId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{random_int}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Negative testing randomized numerical eventIds", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/events/{{random_string(10)}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "GET /events - Negative testing randomized alphanumeric eventIds", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "400", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/tokens?userId={{userId}}", 
                "variables": [
                    {
                        "source": "response_status", 
                        "name": "tokenCode"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Should return list of tokens available to the user.", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvar counter = 0;\nif(json.data.length)\n{\nwhile (counter < json.data.length) \n{\n    if(assert.jsonSchema(json.data[counter], variables.get(\"tSchema\")))\n        assert.isString(json.data[counter].id, 'id');\n    \n    counter += 1;\n}\n\nvar nTokens = counter;\nassert.equal(nTokens, json.data.length, '== number of tokens possesed.');\nvariables.set(\"numTokens\", nTokens);\nif(counter > 0)\n    variables.set(\"tokenId\", json.data[counter - 1].id);\nelse\n{\n    if(assert.isNotEmpty(json.data) && json.data !== '[]')\n        variables.set(\"tokenId\", json.data[counter].id);\n}\n}"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [
                    {
                        "source": "response_status", 
                        "name": "madeToken"
                    }, 
                    {
                        "source": "response_json", 
                        "property": "data.token.ip", 
                        "name": "tokenIP"
                    }, 
                    {
                        "source": "response_json", 
                        "property": "data.token.id", 
                        "name": "tokenId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Grab a new token without sending IP", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.playlist", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.stream", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nvariables.set(\"tokenId\", json.data.id);\n//assert.jsonSchema(json.data.token, variables.get(\"tSchema\"));"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "comparison": "not_equal", 
                "skipped": false, 
                "left_value": "{{madeToken}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "skipped": false, 
                        "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                        "variables": [
                            {
                                "source": "response_status", 
                                "name": "stResponse"
                            }
                        ], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "fragment": "", 
                        "note": "Returns Stream targets of Stream", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "200", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "id": "2593204e-5a04-49d1-84b0-496fb9cf3085", 
                        "before_scripts": [], 
                        "method": "GET"
                    }
                ], 
                "right_value": "200"
            }, 
            {
                "comparison": "not_equal", 
                "skipped": false, 
                "left_value": "{{stResponse}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/streams/provision-stream-targets", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "b863cefc-b992-4ce6-b96a-e32b21a8b84b", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": 200, 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "POST"
                    }, 
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/streams/{{streamId}}/stream-targets/2", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "47bbf079-bfc7-45f4-ad38-3e299c262923", 
                        "note": "Assign cdnId so token can be generated", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "201", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "PUT"
                    }, 
                    {
                        "skipped": false, 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "url": "{{staging-url}}/streams/{{streamId}}/stream-targets", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "a408a8dd-ac9c-4f97-a97a-65ade4a6ffca", 
                        "note": "Returns Stream targets of Stream", 
                        "fragment": "", 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "GET"
                    }, 
                    {
                        "skipped": false, 
                        "url": "{{staging-url}}/tokens?userId={{userId}}", 
                        "variables": [
                            {
                                "source": "response_status", 
                                "name": "tokenCode"
                            }, 
                            {
                                "source": "response_json", 
                                "property": "data[0].id", 
                                "name": "tokenId"
                            }, 
                            {
                                "source": "response_json", 
                                "property": "data[1].id", 
                                "name": "secondTokenId"
                            }
                        ], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "fragment": "", 
                        "note": "Should return list of tokens available to the user.", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ], 
                            "Cache-Control": [
                                "max-age=0;"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "200", 
                                "source": "response_status"
                            }, 
                            {
                                "comparison": "not_empty", 
                                "property": "", 
                                "value": null, 
                                "source": "response_json"
                            }, 
                            {
                                "comparison": "not_empty", 
                                "property": "data", 
                                "value": null, 
                                "source": "response_json"
                            }
                        ], 
                        "scripts": [
                            "var json = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < json.data.length) \n{\n    if(assert.jsonSchema(json.data[counter], variables.get(\"tSchema\")))\n        assert.isString(json.data[counter].id, 'id');\n    \n    counter += 1;\n}\nvariables.set(\"numTokens\", counter);\nassert.equal(counter, json.data.length, '== number of tokens possesed.');"
                        ], 
                        "id": "5b14500a-b74d-456a-8a9d-89fbfa1b9dd4", 
                        "before_scripts": [], 
                        "method": "GET"
                    }
                ], 
                "right_value": "200"
            }, 
            {
                "body": "{\r\n\"ip\": \"111.22.22.22\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Grab another token from the same stream using signed request and sending different IP.", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.token.ip", 
                        "value": "111.22.22.22", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.token.ip", 
                        "value": "{{tokenIP}}", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_equal", 
                        "property": "data.token.id", 
                        "value": "{{tokenId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var json = JSON.parse(response.body);\nassert.jsonSchema(json.data.token, variables.get(\"tSchema\"));"
                ], 
                "before_scripts": [
                    "var requestMethod = request.method.toLowerCase();\nvar requestHost = 'staging-live-api-3.flosports.tv';\nvar requestPath = '/streams/'+ variables.get(\"streamId\") +'/tokens';\nvar queryString = '';\nvar requestBody = request.body;\nvar message = requestMethod + \"\\n\" + requestHost + \"\\n\" + requestPath + \"\\n\" + queryString + \"\\n\" + requestBody;\nvar hmac = CryptoJS.HmacSHA256(message, variables.get('apiSecret'));\nvar signature = hmac.toString(CryptoJS.enc.Hex);\nconsole.log(message);\nconsole.log('signature ', signature);\nrequest.headers[\"Digest\"] = 'SHA-256=' + signature;"
                ], 
                "method": "POST"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/streams/{{streamId}}/tokens/preview", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "comparison": "is_greater_than_or_equal", 
                "skipped": false, 
                "left_value": "{{numTokens}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/tokens?userId={{userId}}", 
                        "variables": [
                            {
                                "source": "response_status", 
                                "name": "sCode"
                            }
                        ], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "6082e378-e586-42e5-bc10-e051e6ec6a8e", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "DELETE"
                    }
                ], 
                "right_value": "{{tokenLimit}}"
            }, 
            {
                "comparison": "equal", 
                "skipped": false, 
                "left_value": "{{sCode}}", 
                "step_type": "condition", 
                "steps": [
                    {
                        "body": "", 
                        "skipped": false, 
                        "form": {}, 
                        "url": "{{staging-url}}/tokens/{{tokenId}}", 
                        "variables": [], 
                        "multipart_form": [], 
                        "step_type": "request", 
                        "auth": {}, 
                        "id": "f533580e-4e09-40fe-892e-3ac0a38f4bc7", 
                        "note": "", 
                        "headers": {
                            "Authorization": [
                                "Bearer {{tokenVal}}"
                            ]
                        }, 
                        "assertions": [
                            {
                                "comparison": "equal_number", 
                                "value": "204", 
                                "source": "response_status"
                            }
                        ], 
                        "scripts": [], 
                        "before_scripts": [], 
                        "method": "DELETE"
                    }
                ], 
                "right_value": "404"
            }
        ], 
        "description": "This will be the main test suite for the Live 3.0 API's staging server.\n"
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/9ca4d8de-0b35-44a1-8032-a5ed5d9bb724/trigger", 
        "name": "Auth and Info -Non Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": " {\"email\":\"{{email}}\",\"password\":\"{{password}}\"}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenVal"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Login & Authentication step", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var tokenSchema = {\n  title: 'dataSchema',\n  type: 'object',\n  required: ['id', 'userId', 'userAgent', 'ip', 'streamId', 'issued'],\n  properties: {\n    id: {\n      type: 'string'\n    },\n    userId: {\n      type: 'number'\n    },\n    userAgent: {\n      type: 'string'\n    },\n    ip: {\n        type: 'string'\n    },\n    streamId: {\n        type: 'number'\n    },\n    issued: {\n        type: 'number'\n    }\n  }\n};\n\nchai.tv4.addSchema('tokenListSchema', tokenSchema);\nvar schema = chai.tv4.getSchema('tokenListSchema');\nvariables.set(\"tSchema\", schema);"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/info", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {}, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/auth", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.userId", 
                        "name": "userId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify Authentication", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/status", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.redis", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.firebase", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.mysql", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.provision-stream-targets", 
                        "value": "success", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/auth/firebase/graphics", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/auth/firebase/live30", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/auth/iot", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }
        ], 
        "description": "Auth and Info Endpoints"
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/8b6ffede-7260-41f4-ae2c-54a8a894d90b/trigger", 
        "name": "Origin Tests - Admin Only", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": "{\r\n\"email\":\"{{email}}\",\r\n\"password\":\"{{password}}\"\r\n}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "fragment": "", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenVal"
                    }, 
                    {
                        "source": "response_json", 
                        "property": "user_id", 
                        "name": "userId"
                    }
                ], 
                "args": {}, 
                "step_type": "request", 
                "auth": {}, 
                "multipart_form": [], 
                "note": "", 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "token", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "user_id", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "data": "", 
                "method": "POST"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"name\":\"runscope-test\",\r\n\t\t\"originClassId\": 2,\r\n\t\t\"originRegionId\": 3,\r\n\t\t\"status\":\"idle\",\r\n\t\t\"isManual\": true,\r\n                \"releaseLabel\": \"Staging\",\r\n               \"licenseKeyId\": 2\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/origin-instances", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "originInstanceId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Create Instance", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "is_greater_than", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "is_less_than", 
                        "value": "203", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/origin-instances", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Get list of all instances", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "// Parse Response and look for Test Instance by 'name'\nvar jsonBody = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < jsonBody.data.length) \n{\n    if(jsonBody.data[counter].name !== \"runscope-test\")\n        counter += 1;\n    else\n    {\n        variables.set(\"originInstanceId\", jsonBody.data[counter].id);\n        break;\n    }\n}"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/origin-instances/{{originInstanceId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Get the instance you created", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal_number", 
                        "property": "data.id", 
                        "value": "{{originInstanceId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"notes\":\"these are some notes.\"\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/origin-instances/{{originInstanceId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "change something on the created instance", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal_number", 
                        "property": "data.id", 
                        "value": "{{originInstanceId}}", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "PATCH"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/origin-instances/{{originInstanceId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "delete the instance", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/origin-instances/{{originInstanceId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "verify deletion by getting 404", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/origin-instances", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Double Verify that instance no longer exists.", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "// Parse Response and look for Test Instance by 'name'\nvar jsonBody = JSON.parse(response.body);\nvar counter = 0;\nwhile (counter < jsonBody.data.length) \n{\n    if(jsonBody.data[counter].name !== \"runscope-test\")\n        counter += 1;\n    else\n    {\n        variables.set(\"originInstanceId\", jsonBody.data[counter].id);\n        break;\n    }\n}\n\nif(counter >= jsonBody.data.length)\n    variables.set(\"originInstanceId\", null);"
                ], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "{\r\n\t\"data\": {\r\n\t\t\"name\":\"runscopeRegion\",\r\n\t\t\"originProviderId\": 1,\r\n\t\t\"code\": 2\r\n\t}\r\n}", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/origin-regions", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.id", 
                        "name": "originRegionId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ], 
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "201", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/origin-regions/{{originRegionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/origin-regions/{{originRegionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "204", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "DELETE"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/origin-regions/{{originRegionId}}", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Verify deletion", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "404", 
                        "source": "response_status"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }
        ], 
        "description": "Origin API Requests and Tests"
    }, 
    {
        "trigger_url": "https://api.runscope.com/radar/a627f4fa-b7da-437a-b697-67c10ef2d52d/trigger", 
        "name": "Auth and Info - Admin", 
        "version": "1.0", 
        "exported_at": 1587501470, 
        "steps": [
            {
                "body": " {\"email\":\"{{email}}\",\"password\":\"{{password}}\"}", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ]
                }, 
                "url": "https://staging-api.flosports.tv/api/tokens", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "token", 
                        "name": "tokenVal"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "Login & Authentication step", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "contains", 
                        "property": "", 
                        "value": "token", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [
                    "var tokenSchema = {\n  title: 'dataSchema',\n  type: 'object',\n  required: ['id', 'userId', 'userAgent', 'ip', 'streamId', 'issued'],\n  properties: {\n    id: {\n      type: 'string'\n    },\n    userId: {\n      type: 'number'\n    },\n    userAgent: {\n      type: 'string'\n    },\n    ip: {\n        type: 'string'\n    },\n    streamId: {\n        type: 'number'\n    },\n    issued: {\n        type: 'number'\n    }\n  }\n};\n\nchai.tv4.addSchema('tokenListSchema', tokenSchema);\nvar schema = chai.tv4.getSchema('tokenListSchema');\nvariables.set(\"tSchema\", schema);"
                ], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/info", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "", 
                "headers": {
                    "": [
                        ""
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/auth", 
                "variables": [
                    {
                        "source": "response_json", 
                        "property": "data.userId", 
                        "name": "userId"
                    }
                ], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "fragment": "", 
                "note": "Verify Authentication", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": "200", 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "skipped": false, 
                "url": "{{staging-url}}/status", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.redis", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.firebase", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.mysql", 
                        "value": "success", 
                        "source": "response_json"
                    }, 
                    {
                        "comparison": "equal", 
                        "property": "data.provision-stream-targets", 
                        "value": "success", 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "GET"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/auth/firebase/graphics", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "url": "{{staging-url}}/auth/firebase/live30", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "fragment": "", 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data.token", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }, 
            {
                "body": "", 
                "skipped": false, 
                "form": {}, 
                "url": "{{staging-url}}/auth/iot", 
                "variables": [], 
                "multipart_form": [], 
                "step_type": "request", 
                "auth": {}, 
                "note": "", 
                "headers": {
                    "Authorization": [
                        "Bearer {{tokenVal}}"
                    ]
                }, 
                "assertions": [
                    {
                        "comparison": "equal_number", 
                        "value": 200, 
                        "source": "response_status"
                    }, 
                    {
                        "comparison": "not_empty", 
                        "property": "data", 
                        "value": null, 
                        "source": "response_json"
                    }
                ], 
                "scripts": [], 
                "before_scripts": [], 
                "method": "POST"
            }
        ], 
        "description": "Auth and Info Endpoints"
    }
] 

